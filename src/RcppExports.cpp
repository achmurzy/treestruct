// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_pathlen_cpp
NumericVector calc_pathlen_cpp(NumericVector len, NumericVector idx);
RcppExport SEXP _treestruct_calc_pathlen_cpp(SEXP lenSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_pathlen_cpp(len, idx));
    return rcpp_result_gen;
END_RCPP
}
// calc_sa_above_cpp
NumericVector calc_sa_above_cpp(NumericVector sa, NumericVector parentrow);
RcppExport SEXP _treestruct_calc_sa_above_cpp(SEXP saSEXP, SEXP parentrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sa(saSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parentrow(parentrowSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_sa_above_cpp(sa, parentrow));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_treestruct_calc_pathlen_cpp", (DL_FUNC) &_treestruct_calc_pathlen_cpp, 2},
    {"_treestruct_calc_sa_above_cpp", (DL_FUNC) &_treestruct_calc_sa_above_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_treestruct(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
